name: CI

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**/*.md'
      - LICENSE
      - '**/*.gitignore'
      - .editorconfig
  pull_request: null

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.platform }}

    strategy:
      fail-fast: false
      matrix:
        python-version:
          - '3.11'
          - '3.12'
          - '3.13'
          - '3.14'
        platform:
          - ubuntu-latest
          - windows-latest
          - macos-latest
    steps:
      - uses: actions/checkout@v5
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install uv
        uses: astral-sh/setup-uv@v5
      - name: Install maturin
        run: uv pip install maturin --system
      - uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: Install
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt
      - name: Install dependencies
        run: bun install
      - name: Build
        run: bun run build
      - name: Lint
        run: bun run lint
      - name: Test
        run: bun run test

  # node
  node-build:
    needs:
      - test
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: bun run build --target x86_64-apple-darwin
          - host: windows-latest
            build: bun run build --target x86_64-pc-windows-msvc
            target: x86_64-pc-windows-msvc
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            build: bun run build --target x86_64-unknown-linux-gnu --use-napi-cross
          - host: macos-latest
            target: aarch64-apple-darwin
            build: bun run build --target aarch64-apple-darwin
    name: stable - ${{ matrix.settings.target }} - node@22
    runs-on: ${{ matrix.settings.host }}
    env:
      DEBUG: napi:*
      MACOSX_DEPLOYMENT_TARGET: '10.13'
      CARGO_INCREMENTAL: '1'
    steps:
      - uses: actions/checkout@v5
      - name: Setup node
        uses: actions/setup-node@v5
        with:
          node-version: 22
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - name: Install
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}
      - uses: mlugg/setup-zig@v2
        if: ${{ contains(matrix.settings.target, 'musl') }}
        with:
          version: 0.14.1
      - name: Install cargo-zigbuild
        uses: taiki-e/install-action@v2
        if: ${{ contains(matrix.settings.target, 'musl') }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tool: cargo-zigbuild
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      - name: Install dependencies
        run: bun install
      - name: Build
        run: ${{ matrix.settings.build }}
        shell: bash
        working-directory: bridge/node
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: |
            bridge/node/dist/changepacks.*.node
          if-no-files-found: error
  
  # python
  python-build:
    runs-on: ${{ matrix.runner }}
    needs:
      - test
    strategy:
      matrix:
        include:
          # Linux manylinux
          - runner: ubuntu-22.04
            target: x86_64
            manylinux: auto
            os: linux
          - runner: ubuntu-22.04
            target: x86
            manylinux: auto
            os: linux
          - runner: ubuntu-22.04
            target: aarch64
            manylinux: auto
            os: linux
          - runner: ubuntu-22.04
            target: armv7
            manylinux: auto
            os: linux
          - runner: ubuntu-22.04
            target: ppc64le
            manylinux: auto
            os: linux

          # Linux musllinux
          - runner: ubuntu-22.04
            target: x86_64
            manylinux: musllinux_1_2
            os: musllinux
          - runner: ubuntu-22.04
            target: x86
            manylinux: musllinux_1_2
            os: musllinux
          - runner: ubuntu-22.04
            target: aarch64
            manylinux: musllinux_1_2
            os: musllinux
          - runner: ubuntu-22.04
            target: armv7
            manylinux: musllinux_1_2
            os: musllinux

          # Windows
          - runner: windows-latest
            target: x64
            os: windows
          - runner: windows-latest
            target: x86
            os: windows

          # macOS
          - runner: macos-13
            target: x86_64
            os: macos
          - runner: macos-14
            target: aarch64
            os: macos
    steps:
      - uses: actions/checkout@v4
      - name: Build wheels
        uses: PyO3/maturin-action@main
        with:
          target: ${{ matrix.target }}
          args: --release --out dist
          working-directory: bridge/python
          manylinux: ${{ matrix.manylinux || '' }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.target }}
          path: bridge/python/dist
  python-sdist:
    runs-on: ubuntu-latest
    needs:
      - test
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@main
        with:
          command: sdist
          args: --out dist
          working-directory: bridge/python
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: bridge/python/dist

  # publish
  changepacks:
    name: changepacks
    runs-on: ubuntu-latest
    permissions:
      # create pull request comments
      pull-requests: write

      # Actions > General > Workflow permissions for creating pull request
      # Create brench to create pull request
      contents: write
    needs:
      - test
      - python-build
      - python-sdist
      - node-build
    steps:
      - uses: actions/checkout@v5
      - uses: changepacks/action@main
        id: changepacks
    outputs:
      changepacks: ${{ steps.changepacks.outputs.changepacks }}

  node-publish:
    name: Node Publish
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    needs:
      - changepacks
    if: ${{ contains(needs.changepacks.outputs.changepacks, 'bridge/node/package.json') }}
    steps:
      - uses: actions/checkout@v5
      - name: Setup node
        uses: actions/setup-node@v5
        with:
          node-version: 22
      - name: Install dependencies
        run: bun install
      - name: create npm dirs
        run: bun run napi create-npm-dirs
      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          path: artifacts
      - name: Move artifacts
        run: bun run artifacts
      - name: List packages
        run: ls -R ./npm
        shell: bash
      - name: Publish
        run: |
          npm config set provenance true
          if git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+$";
          then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --access public
          elif git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+";
          then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --tag next --access public
          else
            echo "Not a release, skipping publish"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  python-publish:
    name: Python Publish
    runs-on: ubuntu-latest
    if: ${{ contains(needs.changepacks.outputs.changepacks, 'bridge/python/pyproject.toml') }}
    needs:
      - changepacks
    permissions:
      # Use to sign the release artifacts
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    steps:
      - uses: actions/download-artifact@v4
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: 'wheels-*/*'
      - name: Publish to PyPI
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: PyO3/maturin-action@main
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*

  upload-assets:
    needs: changepacks
    if: ${{ contains(needs.changepacks.outputs.changepacks, 'crates/cli/Cargo.toml') }}
    permissions:
      contents: write
      id-token: write
    name: Upload Assets for ${{ matrix.platform }}
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: ubuntu-latest
            os: linux
            target: x86_64-unknown-linux-gnu
            binary_name: changepacks-linux-x86_64
          - platform: windows-latest
            os: windows
            target: x86_64-pc-windows-msvc
            binary_name: changepacks-windows-x86_64.exe
          - platform: macos-latest
            os: macos
            target: x86_64-apple-darwin
            binary_name: changepacks-darwin-x86_64

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          components: clippy, rustfmt

      - name: Build Rust binary
        run: cargo build --release --target ${{ matrix.target }}
      
      - name: Upload Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.changepacks.outputs.release_assets_url['crates/cli/Cargo.toml'] }}
          asset_path: target/${{ matrix.target }}/release/changepacks${{ matrix.os == 'windows' && '.exe' || '' }}
          asset_name: ${{ matrix.binary_name }}
          asset_content_type: application/octet-stream
  cargo-publish:
    name: Cargo Publish
    runs-on: ubuntu-latest
    if: ${{ contains(needs.changepacks.outputs.changepacks, 'crates/cli/Cargo.toml') }}
    needs:
      - changepacks
    steps:
      - uses: actions/checkout@v5
      - name: Publish to Cargo
        run: cargo publish

  winget-publish:
    name: Cargo Publish
    runs-on: windows-latest
    if: ${{ contains(needs.changepacks.outputs.changepacks, 'crates/cli/Cargo.toml') }}
    needs:
      - changepacks
    steps:
      - uses: actions/checkout@v5
      - uses: vedantmgoyal9/winget-releaser@main
        with:
          identifier: Changepacks.Changepacks
          installers-regex: '\.exe$' # Only .exe files
          token: ${{ secrets.WINGET_TOKEN }}
